//******************************************************
//
//! \addtogroup W25Xxx W25Xxx
//!
//! \brief Temperature sensor W25Xxx operate.
//!
//! W25Xxx Serial Memories provide a storage solution for systems with limited 
//! space,pins,power.The W25X series offers flexibility and performance well beyond
//! ordinary Serial devices.They are ideal for code download applicatins as well as
//! storing voice,test and data.  
//!
//! <h2>Why do we use W25Xxx in COX Driver Library?</h2>
//! W25Xxx driver in Cox driver library is very convenient to transplant among all
//!  kinds of MCUs and it provides all APIs when you use W25Xxx.<br/>
//!
//! <h2>When should we use W25Xxx in COX Driver Library ?</h2>
//! - If users may change MCU when they use W25Xxx in future
//! - If users plan to use the existing drivers based on COX interface
//!
//! <h2> How to use W25Xxx in COX Driver Library?</h2>
//! W25Xxx driver library is a group of APIs and Macros, who have the prefix \b
//! such as W25XxxDataRead(), W25XxxWrite(), etc. \n
//! First you should select the COX implment according the select mcu. \n
//! Second you should transplant the driver according to your MCU if you use the SPIx 
//! port which is different from in the W25Xxx driver. \n
//! Thirdly you should set System clock. \n
//! Fourthly you should use W25XxxInit() to initialize W25Xxx. \n
//! Fifthly you can get IDcode and read data,if you want to reduce supply current   
//! for power sensitive applications you can enter shutdown mode and so on. \n
//!
//! The COX Driver Library provides the driver of Flash such as W25Xxx and so on,it
//! is convenient for you to transplant the driver to other mcu that the cox support.
//! 
//! 
//! <br />
//! <h2>Contents</h2>
//! - \ref COX_W25Xxx_BLOCK
//! - \ref COX_W25Xxx_TYPICAL_APPLICATION
//! - \ref COX_W25Xxx_Driver_Desc
//! - \ref COX_W25Xxx_Driver_API_Group
//!   - \ref COX_W25Xxx_API_Group_Initialization
//!   - \ref COX_W25Xxx_API_Group_ReadandWrite
//!   - \ref COX_W25Xxx_API_Group_Control
//!   - \ref COX_W25Xxx_API_Group_PowerDown
//! - \ref W25Xxx_Usage
//! .
//!
//! <br />
//! \section COX_W25Xxx_BLOCK 1. W25Xxx Block Diagram
//! <img src="cox_W25Xxx_block.png" />
//!
//! <br />
//! \section COX_W25Xxx_TYPICAL_APPLICATION 2. Connection Diagram
//! <img src="cox_W25Xxx_typical_application.png" />
//! As is shown in diagram,you should connect CS with a GPIO pin in MCU,connect SCK with 
//! SPIx_CLK in MCU, connect DO and DIO withSPIx_MISO and SPIx_MOSI.Sometimes if the GPIO 
//! pin connecting with CS doesn't have pull-up resistor in MCU,you should set a pull-up
//! resistor of CS extern MCU.it is recommended that a decoupling capacitor of 0.1 uF
//! to 1 uF be provided between the VDD and VSS (Ground) pins (a high frequency ceramic
//! capacitor should be used).It is necessary for the capacitor to be located as 
//! possible to the integrated circuit (IC) power pins in order close as to provide
//! effective noise protection to the W25Xxx.
//! 
//! <br />
//! \section COX_W25Xxx_Driver_Desc 3. Driver Desrction
//! The COX W25Xxx driver has the following functions:
//! - Write data to W25Xxx 
//! - PowerDown mode can be used to reduce supply current for power sensitive
//!   applications. 
//! - A Manufacturer's ID register
//! - Read data from W25Xxx
//! .
//!
//! <br />
//! \subsection COX_W25Xxx_Driver_API_Group 4. API Groups
//!
//! The COX W25Xxx API is broken into four groups of functions:
//! - those that deal with W25Xxx Initialization
//! - those that deal with Read and Write data
//! - those that deal with Control
//! - those that deal with Power Down
//! .
//! <br />
//! \subsection COX_W25Xxx_API_Group_Initialization 4.1 W25Xxx initialize W25Xxx
//! initialization are dealed with:
//! - W25XxxInit()
//! - W25XxxDeInit()
//! .
//!
//! <br />
//! \subsection COX_W25Xxx_API_Group_ReadandWrite 4.2 W25Xxx Read and Write
//! - W25XxxIDcodeGet(),
//! - W25XxxPageWrite(),
//! - W25XxxDataRead(),
//! - W25XxxChipErase(),
//! - W25XxxSectorErase(),
//! - W25XxxBlockErase(),
//! - W25XxxWrite().
//! .
//!
//! <br />
//! \subsection COX_W25Xxx_API_Group_Control 4.3 W25Xxx Control
//! - W25XxxWriteEnable(),
//! - W25XxxWriteDisable(),
//! - W25XxxWaitNotBusy(),
//! - W25XxxStatusRegRead(),
//! - W25XxxStatusRegWrite(),
//! - W25XxxDisable().
//! - 
//! .
//!
//! <br />
//! \subsection COX_W25Xxx_API_Group_PowerDown 4.4 W25Xxx enter power down status and wake up
//! - W25XxxEnterPowerDown()
//! - W25XxxWakeUp()
//! .
//! \section W25Xxx_Usage W25Xxx Usage
//! 
//! Below is some example code:
//!
//! \code

//! void W25XxxReadWrite(void)
//! {   
//! 
//!     //
//!     // Step 1, you should set system clock.
//!     // 
//!     xSysCtlClockSet(50000000, xSYSCTL_OSC_MAIN | xSYSCTL_XTAL_12MHZ);
//!     
//!     //
//!     // Step 2, you should initialize W25Xxx
//!     // 
//!     W25XxxInit(10000);
//!     
//!     //
//!     // Step 3, you should check whether W25Xxx is existent and usable or not
//!     // 
//!     if(0xEF14 == W25XxxIDcodeGet())
//!     {
//!       
//!     //
//!     // Step 4, you should erase chip,a block or a sector.
//!     //
//!         W25XxxChipErase();
//!     
//!     //
//!     // Step 5, you can write some data to W25Xxx.
//!     //
//!         W25XxxWrite(ucWriteData, 138, Length);
//!     
//!     
//!     //
//!     // Step 6, you can read some data from W25Xxx.
//!     //
//!         W25XxxDataRead(ucReadData, 138, Length);
//!     }
//! }
//!     
//! \endcode
//
//*****************************************************************************