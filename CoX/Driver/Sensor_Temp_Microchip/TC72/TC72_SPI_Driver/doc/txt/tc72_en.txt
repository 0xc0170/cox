//******************************************************
//
//! \addtogroup TC72 TC72
//!
//! \brief Temperature sensor TC72 operate.
//!
//! The TC72 is a digital temperature sensor capable of reading temperatures from   
//! -55 degree Celsius to +125 degree Celsius. This sensor features a serial 
//! interface that allows communication with a host controller or other peripherals.
//! The TC72 interface is compatible with the SPI protocol.
//!
//! <h2>Why do we use TC72 in COX Driver Library?</h2>
//! TC72 driver in Cox driver library is very convenient to transplant among all kinds
//! of MCUs and it provides all APIs when you use TC72.<br/>
//!
//! <h2>When should we use TC72 in COX Driver Library ?</h2>
//! - If users may change MCU when they use TC72 in future
//! - If users plan to use the existing drivers based on COX interface
//!
//! <h2> How to use TC72 in COX Driver Library?</h2>
//! TC72 driver library is a group of APIs and Macros, who have the prefix \b X. such
//! as TC72_MODE_SHUTDOWN, TC72TempRead(), etc. \n
//! First you should select the COX implment according to the mcu that you select. \n
//! Second you should transplant the driver according to your MCU if you use the SPIx 
//! port which is different from in the tc72 driver. \n
//! Thirdly you should set System clock. \n
//! Fourthly you should use TC72Init() to initialize TC72. \n
//! Fifthly you can get temperature value and IDcode,if you want to reduce supply current   
//! for power sensitive applications you can enter shutdown mode and so on. \n
//!
//! The COX Driver Library provides the driver of temperature such as  sensor tc72
//! and so on,it is convenient for you to transplant the driver to other mcu that 
//! the cox support.
//! 
//! <br />
//! <h2>Contents</h2>
//! - \ref COX_TC72_BLOCK
//! - \ref COX_TC72_TYPICAL_APPLICATION
//! - \ref COX_TC72_Driver_Desc
//! - \ref COX_TC72_Driver_API_Group
//!   - \ref COX_TC72_API_Group_Initialization
//!   - \ref COX_TC72_API_Group_Read
//!   - \ref COX_TC72_API_Group_Configure
//!   - \ref COX_TC72_API_Group_ID_Check
//!   - \ref COX_TC72_API_Group_Disable
//! - \ref TC72_Usage
//!
//! <br />
//! \section COX_TC72_BLOCK 1. TC72 Block Diagram
//! <img src="TC72_Block_Diagram.png" />
//!
//! <br />
//! \section COX_TC72_TYPICAL_APPLICATION 2. Connection Diagram
//! <img src="TC72_Typical_Application.png" />
//! As is shown in diagram,you should connect CS with a GPIO pin in MCU,connect 
//! SCK with SPIx_CLK in MCU, connect SDI and SDOU with SPIx_MISO and SPIx_MOSI.
//! Sometimes if the GPIO pin connecting with CS doesn't have pull-up resistor 
//! in MCU,it is recommended that a decoupling capacitor of 0.1 uF to 1 uF be 
//! provided between the VCC and GND pins (a high frequency ceramic capacitor 
//! should be used).It is necessary for the capacitor to be located as possible 
//! to the integrated circuit power pins in order close as to provide effective.
//! noise protection to the TC72.
//! 
//! <br />
//! \section COX_TC72_Driver_Desc 3. Driver Desrction
//! The COX TC72 driver has the following functions:
//! - Get temperature value at any time using two different modes.
//! - Shundown mode can be used to reduce supply current for power sensitive
//!   applications. 
//! - A Manufacturer's ID register identifies the TC72 is a Microchip Technology 
//!   product.
//! .
//!
//! <br />
//! \section COX_TC72_Driver_API_Group 4. API Groups
//!
//! The COX TC72 API is broken into five groups of functions:
//! - those that deal with SPI_TC72 Initialization
//! - those that deal with Read temperature or Read ID
//! - those that deal with Mode Configure
//! - those that deal with Over ID Check
//! - those that deal with Diasble TC72
//! .
//! <br />
//! \subsection COX_TC72_API_Group_Initialization 4.1 TC72 initialize
//! SPI_TC72 initialization are dealed with:
//! - TC72Init()
//! .
//!
//! <br />
//! \subsection COX_TC72_API_Group_Read 4.2 TC72 Read temperature or id 
//! Read temperature,ID or control register value are dealed with:
//! - TC72TemperReadDec(),
//! - TC72IDcodeGet(),
//! - TC72TemperRead(),
//! - TC72TemperReadFloat(),
//! - TC72ControlRegValGet().
//! .
//!
//! <br />
//! \subsection COX_TC72_API_Group_Configure 4.3 TC72 Mode Configure
//! TC72 Mode Configure are dealed with:
//! - TC72Configure()
//! .
//!
//! <br />
//! \subsection COX_TC72_API_Group_ID_Check 4.4 TC72 ID check
//! TC72 over temperature check are dealed with:
//! - TC72IDCheck()
//! .
//!
//! <br />
//! \subsection COX_TC72_API_Group_Disable 4.5 TC72 Disable
//! TC72 disable and conversely initialize are dealed with:
//! - TC72DeInit()
//! .
//!
//! \section TC72_Usage TC72 Usage
//! 
//! Below is some example code:
//!
//! \code

//! void TC72TemperGet()
//! {   
//!     short sTemperInDec;
//! 
//!     //
//!     // Step 1, you should set system clock.
//!     // 
//!     xSysCtlClockSet(50000000, xSYSCTL_OSC_MAIN | xSYSCTL_XTAL_12MHZ);
//!     
//!     //
//!     // Step 2, you should initialize TC72
//!     // 
//!     TC72Init(1000000);
//!     
//!     //
//!     // Step 3, you should check whether TC72 is existent and usable or not
//!     // 
//!     
//!     if(xtrue == TC72IDCheck())
//!     {
//!     //
//!     // Step 4, you should configure the mode of temperature convertion.
//!     //
//!         TC72Configure(TC72_MODE_CONTINUOUS);
//!         
//!     //
//!     // Step 5, you can get temperature value from TC72.
//!     //
//!         sTemperInDec = TC72TemperReadDec();
//!     }
//! }
//!     
//! \endcode
//
//*****************************************************************************