//*****************************************************************************
//
//!
//! \defgroup VS10xx
//!
//! \brief This is the VS10xx series Driver.
//! 
//! VS10xx is Audio codec chip using SPI or I2S interface.
//! VS10xx series containing 7 chips:VS1002,VS1003,VS1011,VS1033,
//! VS1053,VS1063,VS1103.
//!
//! <h1>Contents</h1>
//! - \ref VS10xx_Block
//! - \ref VS10xx_Connection_Diagram
//! - \ref VS10xx_SPI_Communication
//! - \ref VS10xx_Function_Desc
//! .
//!
//! \section VS10xx_Block 1. VS10xx Physical Block
//! <img src="VS10xx_Block.png" />
//!
//! \section VS10xx_Connection_Diagram 2. VS10xx Connection Diagram
//! <img src="VS10xx_Connection_Diagram.png" />
//!
//! \section VS10xx_SPI_Communication 3. VS10xx supported SPI mode
//! <img src="VS10xx_SCI_SDI_Interface.png" />
//!
//! These devices can be driven by a microcontroller with its SPI peripheral 
//! running in the following modes:
//! - CPOL=1, CPHA=1    \ref xSPI_MOTO_FORMAT_MODE_3
//! .
//! For these two modes, input data is latched in on the rising edge of Serial
//! Clock (C), and output data is available from the falling edge of Serial Clock (C).
//! <img src="VS10xxSCI_Read.png" />
//! <img src="VS10xxSCI_Write.png" />
//!
//! \section VS10xx_Function_Desc 4. VS10xx Instructions
//! - Write Command         \ref VS10XX_WRITE_CMD
//! - Read Command          \ref VS10XX_READ_CMD
//!
//! \defgroup VS10xx_Driver_Single  
//!  
//! \brief This is the VS10xx series Driver can be used in the condition which
//! the system only have one VS10xx series device.
//!
//! This driver is implemented by using defines and global variables.It can only 
//! use on one device because all the APIs use the some macros and global variables.
//!
//! <h1>Contents</h1>
//! - \ref VS10xx_How_Define
//! - \ref US10xx_AudioInfo_Define
//! - \ref VS10xx_API_Group
//! - \ref VS10xx_Usage 
//! .
//!
//! \section VS10xx_How_Define 1. How is the VS10xx Driver implemented?
//! Use define to config some Fixing things,such as SPI base and SPI pins
//! command cs pin, data cs pin, reset pin and data request pin
//! to use VS10xx.
//!
//! Use global variables to save variables use by the APIs.
//!
//! \section US10xx_AudioInfo_Define 2. Audio Information Define
//! 
//! The audio information stored in the structure :
//! - AudioFileInfo
//! The structure contains file type, bit rate, sample rate and other infromation.
//! If the file is MP3, the information also contains MP3ID and MP3layer.
//! .
//!
//! \section VS10xx_API_Group 3. VS10xx Export APIs
//! 
//! The VS10xx CMD is implemented by :
//! - VS10xxReadReg()
//! - VS10xxWriteCmd()
//! - VS10xxWriteData() 
//! - VS10xxInit() 
//! - VS10xxHardReset() 
//! - VS10xxSoftReset() 
//! - VS10xxSineTest() 
//! - VS10xxGetDecodeTime() 
//! - VS10xxResetDecodeTime() 
//! - VS10xxGetAudioInfo() 
//! - VS10xxSetBalance() 
//! - VS10xxSetVolume() 
//! - VS10xxSetVolume2() 
//! - VS10xxGetVolume() 
//! - VS10xxBassTrebleEnhance()
//! .
//!
//! \n
//!
//! \section VS10xx_Usage 1. Usage & Program Examples
//! 
//! \code
//!//*****************************************************************************
//!//
//!//! \file VS1003Example.c
//!//! \brief VS1003 example source code
//!//! \version V1.0.0
//!//! \date 1/23/2013
//!//! \author CooCox
//!//! \copy
//!//!
//!//! Copyright (c)  2012, CooCox
//!//! All rights reserved.
//!//!
//!//! Redistribution and use in source and binary forms, with or without
//!//! modification, are permitted provided that the following conditions
//!//! are met:
//!//!
//!//!     * Redistributions of source code must retain the above copyright
//!//! notice, this list of conditions and the following disclaimer.
//!//!     * Redistributions in binary form must reproduce the above copyright
//!//! notice, this list of conditions and the following disclaimer in the
//!//! documentation and/or other materials provided with the distribution.
//!//!     * Neither the name of the <ORGANIZATION> nor the names of its
//!//! contributors may be used to endorse or promote products derived
//!//! from this software without specific prior written permission.
//!//!
//!//! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//!//! AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//!//! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//!//! ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//!//! LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//!//! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//!//! SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//!//! INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//!//! CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//!//! ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
//!//! THE POSSIBILITY OF SUCH DAMAGE.
//!//
//!//*****************************************************************************
//!#include "xhw_types.h"
//!#include "xhw_memmap.h"
//!#include "xhw_nvic.h"
//!#include "xsysctl.h"
//!#include "xgpio.h"
//!#include "stdio.h"
//!#include "VS10xx.h"
//!#include "hw_CH376INC.h"
//!#include "CH376.h"
//!#include "CH376_FS.h"
//!
//!unsigned char ucBuff[512];
//!unsigned char ucKeySelFlag = 0;
//!const unsigned char ucVolumeLevel[10] = { 0, 0x80, 0x98, 0xA8, 0xB1, 0xBE, 0xC8, 0xD0, 0xDF, 0xFE };
//!static unsigned char sucVolLevel = 3;
//!static short ssVolBalance = 0, ssTrebleA = 0, ssBassA = 0;
//!
//!//*****************************************************************************
//!//
//!//! \brief Peripheral Initialization.
//!//!
//!//! \param None.
//!//!
//!//! This function is to Initialize joystick, LED, USART1, CH376, USB flash disk and VS1003.
//!//!
//!//! \return None.
//!//
//!//*****************************************************************************
//!void PeriphInit()
//!{
//!	unsigned char s;
//!
//!	mInitSTDIO( );
//!	s = mInitCH376Host( );
//!	mStopIfError( s );
//!	while ( CH376DiskConnect( ) != USB_INT_SUCCESS )
//!	{
//!		xSysCtlDelay( 1000000 );
//!		printf("Waiting for USB flash disk to plug in...\n\r");
//!	}
//!	xSysCtlDelay( 2000000 );
//!	for ( s = 0; s < 10; s ++ )
//!	{
//!		xSysCtlDelay( 500000 );
//!	    if ( CH376DiskMount( ) == USB_INT_SUCCESS ) break;
//!	}
//!	VS10xxInit();
//!}
//!
//!//*****************************************************************************
//!//
//!//! \brief VS1003 Example.
//!//!
//!//! \param None.
//!//!
//!//! This function is to give an example of using VS10xx to play audio file.
//!//! we use VS1003 as the decoder. This chip can decode WAV,MP3,WMA,MIDI audio
//!//! files and also can record audio. But we don't give out the record functions
//!//! since it relates much to file manipulation and seldom used. If you need this
//!//! function, please refer to VS10xx datasheet on VLSI's official page.
//!//!
//!//! \return None.
//!//
//!//*****************************************************************************
//!void VS10xxExample(void)
//!{
//!	   unsigned char i,s;
//!	   unsigned short usDataCnt, usAudioDecTime = 0;
//!	   unsigned int ulFileSize = 0, ulFileCursor = 0;
//!	   AudioFileInfo tFLIF;
//!    xSysCtlClockSet(72000000, xSYSCTL_OSC_MAIN | xSYSCTL_XTAL_8MHZ);
//!    xSysCtlDelay( 1000000 );
//!    PeriphInit();
//!    VS10xxSineTest(0x24, 5000000);
//!    VS10xxSineTest(0x85, 5000000);
//!    //
//!    // Open MP3 file
//!    //
//!    s = CH376FileOpen("/01.MP3");
//!    mStopIfError(s);
//!    //
//!    // Set start volume, balance and Bass Treble Enhancement
//!    //
//!    VS10xxSetVolume( 77 );
//!    VS10xxSetBalance( 0 );
//!    VS10xxBassTrebleEnhance(0, 12, 0, 10);
//!    //
//!    // Get file size. (Optional)
//!    //
//!    ulFileSize = CH376GetFileSize( );
//!    //
//!    // Single song loop
//!    //
//!    while( 1 )
//!    {
//!    	CH376ByteRead( ucBuff, 512, &usDataCnt );
//!    	//
//!    	// Send audio stream to VS1003
//!    	//
//!    	for(i=0;i<16;i++)
//!    	{
//!    		VS10xxWriteData( ucBuff + i*32 );
//!    	}
//!    	ulFileCursor += usDataCnt;
//!    	if(ulFileCursor == 4096)
//!    	{
//!    		//
//!    		// Get and print file information
//!    		//
//!    		VS10xxGetAudioInfo(&tFLIF);
//!    		printf("\n\rFile type: %d\n\rBit rate: %d kbps\n\rSample rate: %dHz",
//!    				tFLIF.eFileType, tFLIF.usBitRate, tFLIF.ucSampleRate);
//!    		printf("\n\rMP3 ID: %d\n\rMP3 layer: %d\n\rOther information: %x\n\r",
//!    				tFLIF.ucMp3ID, tFLIF.ucMp3Layer, tFLIF.ucOtherInfo);
//!    	}
//!    	if((ulFileCursor % 10240) == 0)
//!    	{
//!    		//
//!    		// Get and print decode time
//!    		//
//!    		usAudioDecTime = VS10xxGetDecodeTime();
//!    		printf("\rplayed time: %2d:%2ds", usAudioDecTime/60, usAudioDecTime%60);
//!    	}
//!    	//
//!    	// If file come to the end.
//!    	//
//!    	if( usDataCnt==0 )
//!    	{
//!    		ulFileCursor=0;
//!    		//
//!    		// Move file pointer to the beginning of the file
//!    		//
//!    		CH376ByteLocate( 0 );
//!    		//
//!    		// Reset decode time
//!    		//
//!    		VS10xxResetDecodeTime();
//!    	}
//!    }
//!//    CH376FileClose(FALSE);
//!}
//!
//! \endcode
//!
//
//*****************************************************************************