//********************************************************************************
//
//! \defgroup HT32F175x_275x_SPI HT32F175x_275x SPI
//!
//! \brief HT32F175x_275x SPI Peripheral Driver
//!
//! The CoX Peripheral Library also provides APIs for full functions of Holtek
//! HT32F175x_275x SPI.This module supports the whole HT32F175x_275x Series.
//!
//! <br /> 
//! <h1>Contents</h1>
//! - \ref HT32F175x_275x_SPI_BLOCK
//! - \ref HT32F175x_275x_SPI_Function_Desc
//! - \ref HT32F175x_275x_SPI_API_Group
//!   - \ref HT32F175x_275x_API_Group_Configure_Control
//!   - \ref HT32F175x_275x_API_Group_Interrupt_Control
//!   - \ref HT32F175x_275x_API_Group_TransferReceive_Control
//!   .
//! - \ref HT32F175x_275x_SPI_Usage
//! .
//!
//! <br />
//! \section HT32F175x_275x_SPI_BLOCK 1. Spi Physical Block
//! <img src="HT32F175x275x_spi_block.png" />
//!
//! <br />
//! \section HT32F175x_275x_SPI_Function_Desc 2. Functional Description
//! The system control block has the following functions:
//! - The SPI controller can be configured as a master or a slave device.It can also
//!   be set to FIFO mode and slave select mode. 
//! - Each SPI controller can generate an individual interrupt when data transfer is finished,
//!   and the respective interrupt event flag IF will be set. The interrupt 
//!   \event flag will generates an interrupt to CPU if the interrupt enable bit IE.
//! - The SPI controller can be set to different transfer and receive mode,including
//!   normal transfer and receive mode, FIFO mode. At the same time, it is a synchronous
//!   serial data communication protocol which operates in full duplex mode.Devices
//!   communicate in master/slave mode with 4-wire bi-direction interface. 
//! .
//!
//! <br />
//! \subsection HT32F175x_275x_SPI_API_Group 3. API Groups
//!
//! The Spi API is broken into three groups of functions:
//! - those that deal with SPI mode configure,
//! - those that deal with SPI interrupt control,
//! - those that deal with SPI transfer and receive controlling.
//! .
//! <br />
//! \subsection HT32F175x_275x_API_Group_Configure_Control 3.1 SPI configuration control APIs
//!
//! - SPIConfig()
//! - SPISSSet()
//! - SPISSClear()
//! - SPISSConfig()
//! - SPISSOutPutConfigure()
//! - SPIFIFOModeSet()
//! - SPIDMAEnable()
//! - SPIDMADisable()
//! - SPILoopBackEnable()
//! - SPILoopBackDisable()
//! .
//!
//! <br />
//! \subsection HT32F175x_275x_API_Group_Interrupt_Control 3.2 SPI Interrupt Control APIs
//! - SPIIntFlagClear()
//! - SPIIntFlagGet()
//! - SPIIntDisable()
//! - SPIIntEnable()
//! .
//!
//! <br />
//! \subsection HT32F175x_275x_API_Group_TransferReceive_Control 3.3 SPI Transfer&Receive Control
//!
//! - SPISingleDataReadWrite()
//! - SPIBitLengthGet()
//! - SPIDataRead()
//! - SPIRxRegisterGet()
//! - SPIDataWrite()
//! - SPITxRegisterSet()
//! - SPIIsBusy()
//! - SPIIsRxEmpty()
//! - SPIIsRxFull()
//! - SPIIsTxEmpty()
//! - SPIIsTxFull()
//! - SPIFIFOStatusGet()
//! - SPIFIFOClear()
//! - SPIFIFOModeSet()
//! - SPIFIFOLevelSet()
//! - SPITimeOutValSet()
//! .
//! <br />
//! \section HT32F175x_275x_SPI_Usage 4 Program Examples
//! The following example shows how to use the SPI APIs to configue SPI and to implement 
//! the function of transferring and receiving. 
//! \code
//! #include "xhw_memmap.h"
//! #include "xspi.h"
//! #include "xsysctl.h"
//! #include "xhw_types.h"
//! #include "xgpio.h"
//!
//! unsigned char SendData[] = "Wonderful World";
//! unsigned char ReceData[15];
//! unsigned long i;
//!
//! //*****************************************************************************
//!
//! //Ininite the SPI case which is needed
//!
//! //param None
//!
//! //This function ininite the SPI including clock source and enable spi 
//!
//! //return none
//!
//! //*****************************************************************************
//! void SpiReceiveTransferInit(void)
//! {
//!    //
//!    // Set SysClk 8MHz using Extern 18M oscillator
//!    //
//!    xSysCtlClockSet(8000000, xSYSCTL_OSC_MAIN|xSYSCTL_XTAL_8MHZ);
//!    //
//!    // Enable Peripheral SPI0,SPI1
//!    //
//!    SysCtlPeripheralEnable(SYSCTL_PERIPH_SPI0);
//!    SysCtlPeripheralEnable(SYSCTL_PERIPH_AFIO);
//!    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD); 
//!    xSPinTypeSPI(SPI0CLK, PD9);
//!    xSPinTypeSPI(SPI0MOSI, PD10);
//!    xSPinTypeSPI(SPI0MISO, PD11);
//!    xSPinTypeSPI(SPI0CS, PD8);
//!  }
//! //*****************************************************************************
//! //
//! // Spi Master Slave Mode Configure
//! //
//! // param None
//! //
//! // This function configure the SPI as loopback function.
//! //
//! // return None
//!
//! //*****************************************************************************
//! void SpiMasterSlaveModeConfig(void)
//! {   
//!     unsigned long i;
//!     for(i = 0; i < 15; i++)
//!     {
//!         ReceData[i] = SPISingleDataReadWrite(SPI0_BASE, SendData[i]); 
//!     }
//! }
//! //******************************************************************************
//! //
//! // The main function of the SPI transfer  
//! //
//! //******************************************************************************
//! int main(void)
//! {
//!    SpiReceiveTransferInit();
//!    SpiMasterSlaveModeConfig();
//!    while(1)
//!    {	
//!    }
//!        
//! }
//! \endcode
//! \note 
//!
//**********************************************************************************
