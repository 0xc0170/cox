//********************************************************************************
//
//! \defgroup STM32F1xx_SysCtl STM32F1xx SysCtl
//!
//! \brief STM32F1xx SysCtl Peripheral Driver
//! 
//! The CoX Peripheral Library also provide APIs for function full functions of
//! Nuvoton STM32F1xx SysCtl.This module supports the whole STM32F1xx Series.
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref STM32F1xx_SysCtl_Block
//! - \ref STM32F1xx_SysCtl_Function_Desc
//! - \ref STM32F1xx_SysCtl_API_Group
//!   - \ref STM32F1xx_API_Group_Peripharal_Control
//!   - \ref STM32F1xx_API_Group_Clock_Control
//!   - \ref STM32F1xx_API_Group_Power_Control
//!   - \ref STM32F1xx_API_Group_Interrupt_Control
//!   .
//! - \ref STM32F1xx_SysCtl_Usage
//! .
//!
//! <br />
//! \section STM32F1xx_SysCtl_Block 1. SysCtl Physical Block
//! <img src="STM32F1xx_sysctl_block.png" />
//!
//! <br />
//! \section STM32F1xx_SysCtl_Function_Desc 2. Functional Description
//! The system control block has the following functions:
//! - The perpheral can be individual enable,disable and reset by software
//! - Three different clock sources can be used to drive the system clock (SYSCLK):
//!   1,HSI oscillator clock; 2,HSE oscillator clock; 3,PLL clock;
//!   Each clock source can be switched on or off independently when it is not used,  
//!   to optimize power consumption.
//! - When chip enters into power down mode, system clocks, some clock sources, 
//!   and some peripheral clocks will be disabled. Some clock sources,peripherals 
//!   clock are still active in power down mode.
//! .
//!
//! <br />
//! \subsection STM32F1xx_SysCtl_API_Group 2. API Groups
//!
//! The SysCtl API is broken into three groups of functions:
//! - those that deal with Clock control,
//! - those that deal with Peripheral control,
//! - those that deal with Power control.
//! .
//! <br />
//! \subsection STM32F1xx_API_Group_Clock_Control 2.1 SysCtl clock control APIs
//!
//! The SysCtl clock control are dealed with :
//! - SysCtlHClockGet(),
//! - SysCtlPeripheralClockSourceSet(),
//! - SysCtlIPClockSourceSetConvert(),
//! - SysCtlPeripheralClockSourceSet(),
//! - SysCtlAPB1ClockGet(),
//! - SysCtlAPB2ClockGet(),
//! - SysCtlLSIConfig(),
//! - SysCtlLSEConfig(),
//! - SysCtlDelay(),
//! - SysCtlClockSet().
//! .
//! 
//! <br />
//! \subsection STM32F1xx_API_Group_Peripharal_Control 2.2 SysCtl Peripharal Control APIs
//! The SysCtl clock control are dealed with :
//! - SysCtlPeripheralDisable(),
//! - SysCtlPeripheralEnable(),
//! - SysCtlPeripheralReset(),
//! - SysCtlResetFlagGet(),
//! - SysCtlReset(),
//! - SysCtlResetFlagClear().
//! .
//!
//! <br />
//! \subsection STM32F1xx_API_Group_Power_Control 2.3 SysCtl power control
//! 
//! The SysCtl power control are dealed with : 
//! - SysCtlSleep(),
//! - SysCtlBackupDomainReset(),
//! - SysCtlFlagStatusClear(),
//! - SysCtlFlagStatusGet(),
//! - SysCtlEnterStandbyMode(),
//! - SysCtlStopModeConfig(),
//! - SysCtlWakeUpPinDisable(),
//! - SysCtlWakeUpPinEnable(),
//! - SysCtlPVDLevelConfig(),
//! - SysCtlBackupAccessDisable(),
//! - SysCtlBackupAccessEnable().
//!
//! <br />
//! \subsection STM32F1xx_API_Group_Interrupt_Control 2.3 SysCtl interrupt control
//! 
//! The SysCtl interrupt control are dealed with : 
//! - RCCIntCallbackInit(),
//! - SysCtlIntEnable(),
//! - SysCtlIntDisable(),
//! - SysCtlIntFlagClear(),
//! - SysCtlIntFlagGet().
//!
//! <br />
//! \section STM32F1xx_SysCtl_Usage
//! The following example shows how to use the SysCtl API to configure the
//! system clock,enable the relative peripheral,put the processor into sleep
//! mode,and then wake up by Wake Up pin;
//! \code
//! #include "xhw_types.h"
//! #include "xhw_memmap.h"
//! #include "xcore.h"
//! #include "xhw_sysctl.h"
//! #include "xsysctl.h"
//! #include "xhw_ints.h"
//! #include "xhw_nvic.h"
//!
//! //*************************************************************************
//! //
//! // Enter Sleep Mode function.
//! //
//! // This function will force the processor enter sleep mode,after operating 
//! // the action,some clocks will be closed except "Internal 32 kHz low speed 
//! // oscillator clock".
//!  
//! // \return None
//! //*************************************************************************
//! void PWRCtlStandby(void)
//! {
//!     xSysCtlClockSet(72000000, xSYSCTL_XTAL_8MHZ | xSYSCTL_OSC_MAIN);
//!     xSysCtlSleep();
//! }
//!  
//! //*************************************************************************
//! // 
//! // Wake up mcu from sleep mode function.
//! // 
//! // This function use extern interrupt to wake up mcu from sleep mode 
//! //  
//! //! \return None
//! //*************************************************************************
//! void WakeUpFromPowerDown(void)
//! {	 
//!     xGPIOSPinTypeGPIOInput(PA0);
//!     xGPIOPinIntEnable(xGPIOA_BASE, xGPIO_PIN_0, xGPIO_FALLING_EDGE);
//!     xIntPrioritySet(INT_EXTI0, 1);
//!     xIntEnable(INT_EXTI0);
//!     
//! }
//! //*****************************************************************************
//! //
//! // The main function of the PWR_WKUP 
//! //
//! //*****************************************************************************
//! int main(void)
//! {
//!     PWRCtlStandby();
//!     WakeUpFromPowerDown();
//!     while(1)
//!     {
//!         
//!     }
//! }
//! \endcode
//! \note 
//!
//********************************************************************************